#+title:  Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./emacsinit.el 
#+STARTUP: content

* Setup
** System
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; (require 'package)
  ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  ;; (package-initialize)

  ;; (require 'use-package)
  ;; (setq use-package-always-ensure t)

  (setq backup-directory-alist '(("." . "~/.cache/emacs_backup")))
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

** straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
#+end_src

* UI
** Emacs
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq ring-bell-function 'ignore)

  (global-display-line-numbers-mode t)
  (setq-default display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 3)

  (add-hook 'prog-mode-hook 'electric-pair-local-mode)

  (setq-default tab-width 4)

  (setq scroll-margin 6)
  (setq scroll-conservatively 101)

  (setq-default truncate-lines t)
  (show-paren-mode 0)
  (blink-cursor-mode 0)

  (setq frame-resize-pixelwise t)

  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-listing-switches "-alh")

  ;; (set-face-attribute 'default nil :family "Ttyp0" :height 100)
  ;; (set-face-attribute 'fixed-pitch nil :family "Ttyp0" :height 100)
  (set-face-attribute 'default nil :family "Iosevka" :height 100)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 100)
  (set-face-attribute 'variable-pitch nil :family "Roboto" :height 120)

  ;; Temporary
  ;; (set-face-attribute 'mode-line-active nil :inherit 'mode-line)

  (defun mk/transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque: ")
    (set-frame-parameter (selected-frame) 'alpha value))

  ;; (add-hook 'server-after-make-frame-hook (lambda () (mk/transparency 97)))

  (defun mk/set-line-spacing (value)
    "Sets the line spacing"
    (interactive "nValue: ")
    (setq-default line-spacing value)
    )
#+end_src

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    )
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-startup-banner "~/.config/emacs/banner.txt")
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                       (projects . 5)
                       (registers . 5)))
    (setq dashboard-center-content t)
    (setq dashboard-set-footer nil)
    (set-face-attribute 'dashboard-items-face nil :weight 'normal)

    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook)
    )
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; (use-package telephone-line
  ;;   :config
  ;;   (setq telephone-line-primary-left-separator 'telephone-line-flat)
  ;;   (setq telephone-line-primary-right-separator 'telephone-line-flat)
  ;;   (setq telephone-line-secondary-left-separator 'telephone-line-flat)
  ;;   (setq telephone-line-secondary-right-separator 'telephone-line-flat)
  ;;   (telephone-line-mode 1)
  ;;   )

  (setq-default mode-line-format
    '("%e" mode-line-front-space (:eval                                
      (moody-ribbon evil-mode-line-tag 0 'up))
     (:propertize
      ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
      display
      (min-width
       (5.0)))
     mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
     (vc-mode vc-mode)
     "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)
   )

  (column-number-mode)

  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function)
    (setq moody-mode-line-height 20)
    )

  (use-package minions
    :config
    (minions-mode)
    )
#+end_src

** Themes
#+begin_src emacs-lisp
  (setq custom-safe-themes t)

  (use-package doom-themes :no-require t
    :config
    (setq doom-themes-enable-bold nil)
    (setq doom-themes-enable-italic nil)
    )

  (use-package kaolin-themes :no-require t)

  (use-package base16-theme :no-require t
    :custom
    (base16-distinct-fringe-background nil)
    :config
    ;; (defvar my/base16-colors base16-onedark-colors)
    ;; (setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box)
    ;; 		evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) box)
    ;; 		evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box)
    ;; 		evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box)
    ;; 		evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) box)
    ;; 		evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))
    )

#+end_src

* Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-insert-state-cursor 'box)
    (setq evil-visual-state-cursor 'hollow)
    (setq evil-respect-visual-line-mode t)
    (setq evil-want-minibuffer t)
    :config
    (evil-mode 1)
    (evil-global-set-key 'normal (kbd "U") 'evil-redo)

    (setq evil-mode-line-format nil)
    (setq evil-normal-state-tag   (propertize " ● " 'face '((:foreground "SeaGreen")))
          evil-emacs-state-tag    (propertize " ● " 'face '((:foreground "SkyBlue2"      )))
          evil-insert-state-tag   (propertize " ● " 'face '((:foreground "chartreuse3"   )))
          evil-replace-state-tag  (propertize " ● " 'face '((:foreground "chocolate"     )))
          evil-motion-state-tag   (propertize " ● " 'face '((:foreground "plum3"         )))
          evil-visual-state-tag   (propertize " ● " 'face '((:foreground "gray"          )))
          evil-operator-state-tag (propertize " ● " 'face '((:foreground "sandy brown"   ))))
    )

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode)
    )
#+end_src

* Utility
** Completion Frameworks
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight (vertico :files (:defaults "extensions/*")
                       :includes (vertico-indexed
                                  vertico-flat
                                  vertico-grid
                                  vertico-mouse
                                  vertico-quick
                                  vertico-buffer
                                  vertico-repeat
                                  vertico-reverse
                                  vertico-directory
                                  vertico-multiform
                                  vertico-unobtrusive)
                       )
    :init
    (vertico-mode)
    (setq vertico-count 15)
    (setq evil-complete-next-minibuffer-func 'vertico-next)
    (setq evil-complete-previous-minibuffer-func 'vertico-previous)
    )
#+end_src

*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
	:init
	(setq completion-styles '(orderless)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles . (partial-completion)))))
	:config
	(set-face-attribute 'orderless-match-face-0 nil :weight 'normal)
	(set-face-attribute 'orderless-match-face-1 nil :weight 'normal)
	(set-face-attribute 'orderless-match-face-2 nil :weight 'normal)
	(set-face-attribute 'orderless-match-face-3 nil :weight 'normal)
	)
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
	:init
	(marginalia-mode))
#+end_src

*** Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    ;;:bind (;; C-c bindings (mode-specific-map)
           ;; ("C-c h" . consult-history)
           ;; ("C-c m" . consult-mode-command)
           ;; ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ;; ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ;; ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ;; ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ;; ("M-#" . consult-register-load)
           ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ;; ("C-M-#" . consult-register)
           ;; Other custom bindings
           ;; ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ;; ("M-g e" . consult-compile-error)
           ;; ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ;; ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ;; ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ;; ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ;; ("M-g m" . consult-mark)
           ;; ("M-g k" . consult-global-mark)
           ;; ("M-g i" . consult-imenu)
           ;; ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("M-s d" . consult-find)
           ;; ("M-s D" . consult-locate)
           ;; ("M-s g" . consult-grep)
           ;; ("M-s G" . consult-git-grep)
           ;; ("M-s r" . consult-ripgrep)
           ;; ("M-s l" . consult-line)
           ;; ("M-s L" . consult-line-multi)
           ;; ("M-s m" . consult-multi-occur)
           ;; ("M-s k" . consult-keep-lines)
           ;; ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ;; ("M-s e" . consult-isearch-history)
           ;; :map isearch-mode-map
           ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ;; ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ;; ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           ;; :map minibuffer-local-map
           ;; ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ;; ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    ;; :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )
#+end_src

** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode 0)))
    )
#+end_src

** Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :config
    (set-face-attribute 'aw-leading-char-face nil :height 1.0)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-dispatch-always t)
    )
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy)
#+end_src

** Perspectives
#+begin_src emacs-lisp
  ;; (use-package persp-mode
  ;;   :config
  ;;   (with-eval-after-load "persp-mode-autoloads"
  ;; 	(setq persp-autokill-buffer-on-remove 'kill-weak)
  ;; 	(add-hook 'window-setup-hook #'(lambda () (persp-mode 1))))
  ;;   )
#+end_src

** Magit
#+begin_src emacs-lisp
 (use-package magit)
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (treemacs-resize-icons 16)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    ;; (treemacs-git-mode 'deferred)
    ;; (setq doom-themes-treemacs-theme "doom-atom")
    ;; (doom-themes-treemacs-config)
    (setq treemacs-width-is-initially-locked nil)
    )

  (use-package treemacs-evil
    :after (treemacs evil)
    :bind
    (:map global-map
          ("C-x t t"   . treemacs)
          ("C-x t C-t" . treemacs-find-file))
    )

  (load "~/.config/emacs/treemacs-theme.el")
  (treemacs-load-theme 'mk/treemacs-theme)

  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode 0)))
#+end_src

** ripgrep
#+begin_src emacs-lisp
 (use-package ripgrep)
#+end_src
   
** Helpful
#+begin_src emacs-lisp
 (use-package helpful
   :config
   (global-set-key (kbd "C-h f") #'helpful-function)
   (global-set-key (kbd "C-h c") #'helpful-callable)
   (global-set-key (kbd "C-h v") #'helpful-variable)
   (global-set-key (kbd "C-h o") #'helpful-symbol)
   (global-set-key (kbd "C-h k") #'helpful-key)
   )
#+end_src

** Which key
#+begin_src emacs-lisp
 (use-package which-key
	 :config
	 (which-key-mode))
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

** Restart Emacs
#+begin_src emacs-lisp
  (defun mk/launch-emacs-daemon-and-client ()
    (call-process "sh" nil nil nil "-c" "emacs --daemon && emacsclient -c &")
    )

  (defun mk/restart-emacs-daemon ()
    "Restart Emacs daemon and launch a new client."
    (interactive)
    (let ((kill-emacs-hook (append kill-emacs-hook (list 'mk/launch-emacs-daemon-and-client))))
      (save-buffers-kill-emacs)
      )
    )

  (global-set-key (kbd "<f12>") 'mk/restart-emacs-daemon)
  (global-set-key (kbd "<f11>") 'save-buffers-kill-emacs)
#+end_src

* Programming
** Languages
*** C++
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "k&r")
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
#+end_src

*** Lua
#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

*** CMake
#+begin_src emacs-lisp
  (use-package cmake-font-lock)
#+end_src

*** GLSL
#+begin_src emacs-lisp
  (use-package glsl-mode)
#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (rainbow-delimiters-mode)))
    )
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (add-hook 'after-init-hook 'global-company-mode)
    )
  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :init
  ;;   (global-flycheck-mode)
  ;;   )
#+end_src

** Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  ;; (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (set-face-attribute 'tree-sitter-hl-face:property 'nil :slant 'normal)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    :custom
    (projectile-enable-caching t)
    (projectile-track-known-projects-automatically nil)
    )
#+end_src

** Yasnippets
#+begin_src emacs-lisp
 (use-package yasnippet
   :config
   (yas-global-mode)
   )
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook
    (c++-mode . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration)

    :init
    (setq lsp-keymap-prefix "C-c l")

    :config
    (lsp-enable-which-key-integration)

    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-links nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-log-io nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-eldoc-enable-hover nil)

    :commands
    (lsp lsp-deferred)
    )

  (use-package lsp-treemacs)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)
    (lsp-ui-sideline-enable nil)
    )
#+end_src

*** clangd
#+begin_src emacs-lisp
  (setq lsp-clients-clangd-args '("--header-insertion=never" "--completion-style=detailed"))
#+end_src

** DAP
#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (setq dap-auto-configure-features '(sessions locals controls tooltip))
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra)))
    (require 'dap-cpptools)
    (require 'dap-codelldb)
    )
#+end_src

* Org
#+begin_src emacs-lisp
  (use-package visual-fill-column)

  (use-package org
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (setq org-hide-emphasis-markers t)
    (setq org-startup-indented t)
    (setq org-pretty-entities t)
    (add-to-list 'org-latex-packages-alist
                 '("" "chemfig" t))
    (setq org-preview-latex-default-process 'dvisvgm)

    (add-hook 'org-mode-hook
              (lambda ()
                (visual-line-mode)
                (variable-pitch-mode)
                (setq visual-fill-column-center-text t)
                (setq fill-column 140)
                (display-line-numbers-mode 0)
                (visual-fill-column-mode)
                (company-mode 0)

                (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
                (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
                (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
                (set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
                (setq-local evil-normal-state-cursor '(bar . 1))
                (setq-local evil-insert-state-cursor '(bar . 1))
                (setq-local )
                )
              )
    )

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    )

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("•"))
    )
#+end_src

* Keybindings
#+begin_src emacs-lisp
  ;; (defhydra hydra-window ()
  ;;   "window"
  ;;   ("w" ace-window)
  ;;   ("h" windmove-left) 
  ;;   ("j" windmove-down) 
  ;;   ("k" windmove-up) 
  ;;   ("l" windmove-right) 
  ;;   ("]" enlarge-window-horizontally)
  ;;   ("[" enlarge-window)
  ;;   )

  (use-package general
    :config
    (general-evil-setup)

    (general-define-key
     :states '(normal visual)
     :prefix "SPC"

     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p s" 'projectile-save-project-buffers
     "p a" 'projectile-find-other-file
     "p b" 'projectile-save-project-buffers
     )

    (general-define-key
      :states '(normal visual)
      :keymaps 'override
      :prefix "SPC"

      "x" 'execute-extended-command

      "f f" 'find-file
      "f s" 'save-buffer

      "c b" 'consult-bookmark

      "b" 'consult-buffer

      "k k" 'kill-current-buffer
      "k K" 'kill-buffer

      "s" 'consult-line

      ;; "w" 'hydra-window/body
      "w" 'ace-window
      "o" 'other-window
      "0" 'delete-window

      "h v" 'helpful-variable
      "h f" 'helpful-function
      "h k" 'helpful-key
      "h o" 'helpful-symbol
      "h p" 'helpful-at-point

      "t t" 'treemacs
      )

    (general-define-key
     :states '(normal visual)
     :keymaps 'override

     "g s" 'evil-avy-goto-line
     )

    (general-define-key
     :prefix ","
     :states '(normal visual)
     :keymaps 'dap-mode-map

     "d d" 'dap-debug
     "d b" 'dap-breakpoint-toggle
     "d h" 'dap-hydra
     )

    (general-define-key
     :prefix ","
     :states '(normal visual)
     :keymaps 'lsp-mode-map

     "l d"   'lsp-find-declaration
     "l g"   'lsp-find-definition
     "l i"   'lsp-find-implementation
     "l r"   'lsp-rename
     "l q q" 'lsp-workspace-shutdown
     )

    (general-define-key
     :prefix ","
     :states '(normal visual)
     :keymaps 'org-mode-map

     "t" 'org-babel-tangle
     )

    (general-define-key
     :prefix ","
     :states '(normal)
     :keymaps 'emacs-lisp-mode

     "e e" 'eval-last-sexp
     "e b" 'eval-buffer
     )

    (general-define-key
     :prefix ","
     :states '(visual)
     :keymaps 'emacs-lisp-mode

     "e" 'eval-region
     )

    )
#+end_src

